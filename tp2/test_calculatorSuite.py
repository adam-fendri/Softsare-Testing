# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestCalculatorSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_add(self):
    # Test name: add
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 2
    self.driver.find_element(By.ID, "num1").send_keys("2")
    # 5 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 6 | select | id=operator | label=+
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '+']").click()
    # 7 | click | id=num2 | 
    self.driver.find_element(By.ID, "num2").click()
    # 8 | type | id=num2 | 3
    self.driver.find_element(By.ID, "num2").send_keys("3")
    # 9 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 10 | assertText | id=result | Résultat : 5
    assert self.driver.find_element(By.ID, "result").text == "Résultat : 5"
  
  def test_division(self):
    # Test name: division
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 6
    self.driver.find_element(By.ID, "num1").send_keys("6")
    # 5 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 6 | select | id=operator | label=/
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '/']").click()
    # 7 | click | id=num2 | 
    self.driver.find_element(By.ID, "num2").click()
    # 8 | type | id=num2 | 3
    self.driver.find_element(By.ID, "num2").send_keys("3")
    # 9 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 10 | assertText | id=result | Résultat : 2
    assert self.driver.find_element(By.ID, "result").text == "Résultat : 2"
  
  def test_multiplication(self):
    # Test name: multiplication
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 1
    self.driver.find_element(By.ID, "num1").send_keys("1")
    # 5 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 6 | click | id=num2 | 
    self.driver.find_element(By.ID, "num2").click()
    # 7 | type | id=num2 | 3
    self.driver.find_element(By.ID, "num2").send_keys("3")
    # 8 | select | id=operator | label=*
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '*']").click()
    # 9 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 10 | assertText | id=result | Résultat : 3
    assert self.driver.find_element(By.ID, "result").text == "Résultat : 3"
  
  def test_null(self):
    # Test name: null
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 1
    self.driver.find_element(By.ID, "num1").send_keys("1")
    # 5 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 6 | select | id=operator | label=/
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '/']").click()
    # 7 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 8 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
  
  def test_substract(self):
    # Test name: substract
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 3
    self.driver.find_element(By.ID, "num1").send_keys("3")
    # 5 | click | id=num2 | 
    self.driver.find_element(By.ID, "num2").click()
    # 6 | type | id=num2 | 1
    self.driver.find_element(By.ID, "num2").send_keys("1")
    # 7 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 8 | select | id=operator | label=-
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '-']").click()
    # 9 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 10 | assertText | id=result | Résultat : 2
    assert self.driver.find_element(By.ID, "result").text == "Résultat : 2"
  
  def test_0division(self):
    # Test name: 0division
    # Step # | name | target | value
    # 1 | open | https://safatelli.github.io/tp-test-logiciel/assets/calc.html | 
    self.driver.get("https://safatelli.github.io/tp-test-logiciel/assets/calc.html")
    # 2 | setWindowSize | 1536x824 | 
    self.driver.set_window_size(1536, 824)
    # 3 | click | id=num1 | 
    self.driver.find_element(By.ID, "num1").click()
    # 4 | type | id=num1 | 1
    self.driver.find_element(By.ID, "num1").send_keys("1")
    # 5 | click | id=num2 | 
    self.driver.find_element(By.ID, "num2").click()
    # 6 | type | id=num2 | 0
    self.driver.find_element(By.ID, "num2").send_keys("0")
    # 7 | click | id=operator | 
    self.driver.find_element(By.ID, "operator").click()
    # 8 | select | id=operator | label=/
    dropdown = self.driver.find_element(By.ID, "operator")
    dropdown.find_element(By.XPATH, "//option[. = '/']").click()
    # 9 | click | css=button | 
    self.driver.find_element(By.CSS_SELECTOR, "button").click()
    # 10 | assertText | id=result | Résultat : Infinity
    assert self.driver.find_element(By.ID, "result").text == "Résultat : Infinity"
  
